<!doctype html>
<html lang="{{ metadata.language }}">
	<head>
		<script async src="https://www.googletagmanager.com/gtag/js?id=G-CHBF15W2W1"></script>
		<script>
			window.dataLayer = window.dataLayer || [];
			function gtag(){dataLayer.push(arguments);}
			gtag('js', new Date());
			gtag('config', 'G-CHBF15W2W1');
		</script>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<title>{{ title or metadata.title }}</title>
		<link rel="icon" type="image/x-icon" href="/img/favicon.ico">
		<link href="{{ metadata.url + page.url  }}" rel="canonical">
		<meta name="description" content="{{ seoDescription or metadata.description }}">
		<meta name="author" content="Sanjeev Subedi">

		<meta property="og:locale" content="en_US">
		<meta property="og:site_name" content="{{ metadata.url }}">
		<meta property="og:type" content="article">
		<meta property="og:title" content="{{ title or metadata.title }}">
		<meta property="og:description" content="{{ seoDescription or metadata.description }}">
		<meta property="og:url" content="{{ metadata.url + page.url }}">


		{#- Atom and JSON feeds included by default #}
		<link rel="alternate" href="/feed/feed.xml" type="application/atom+xml" title="{{ metadata.title }}">
		<link rel="alternate" href="/feed/feed.json" type="application/json" title="{{ metadata.title }}">
		<link rel="preload" href="/fonts/barlow-regular.ttf" as="font" crossorigin />
		<link rel="preload" href="/fonts/barlow-medium.ttf" as="font" crossorigin />
		<link rel="preload" href="/fonts/barlow-bold.ttf" as="font" crossorigin />

		{#-
		CSS bundles are provided via the `eleventy-plugin-bundle` plugin:
		1. You can add to them using `{% css %}`
		2. You can get from them using `{% getBundle "css" %}` or `{% getBundleFileUrl "css" %}`
		3. You can do the same for JS: {% js %}{% endjs %} and <script>{% getBundle "js" %}</script>
		4. Learn more: https://github.com/11ty/eleventy-plugin-bundle
		#}

		{#- Add an arbitrary string to the bundle #}
		{%- css %}* { box-sizing: border-box; }{% endcss %}
		{#- Add the contents of a file to the bundle #}
		{%- css %}{% include "public/css/reset.css" %}{% endcss %}
		{%- css %}{% include "public/css/index.css" %}{% endcss %}
		{#- Or add from node_modules #}
		{# {%- css %}{% include "node_modules/prismjs/themes/prism-okaidia.css" %}{% endcss %} #}

		{#- Render the CSS bundle using Inlined CSS (for the fastest site performance in production) #}
		<style>{% getBundle "css" %}</style>
		{#- Renders the CSS bundle using a separate file, if you can't set CSP directive style-src: 'unsafe-inline' #}
		{#- <link rel="stylesheet" href="{% getBundleFileUrl "css" %}"> #}
	</head>
	<body>
		<header>
			<div class="container">
				{#- Read more about `eleventy-navigation` at https://www.11ty.dev/docs/plugins/navigation/ #}
				<nav>
					<a href="/" class="home-link">
						<span class="lg-logo">{{ metadata.logo }}</span>
						<span class="sm-logo">{{ metadata.smallLogo }}</span></a>
					<ul class="nav">
					{%- for entry in collections.all | eleventyNavigation %}
						<li class="nav-item"><a href="{{ entry.url }}"{% if entry.url == page.url %} aria-current="page"{% endif %}>{{ entry.title }}</a></li>
					{%- endfor %}
					</ul>
				</nav>
			</div>
		</header>

		<main>
			<div class="container">
				{{ content | safe }}
			</div>
		</main>

		<footer>
			Â© Copyright 2023 Sanjeev Subedi
		</footer>
		<script>
			document.addEventListener("DOMContentLoaded", function() {
				const lazyVideos = [].slice.call(document.querySelectorAll("video.lazy"));

				if ("IntersectionObserver" in window) {
					const lazyVideoObserver = new IntersectionObserver(function(entries, observer) {
						entries.forEach(function(video) {
							if (video.isIntersecting) {
							for (const source in video.target.children) {
								const videoSource = video.target.children[source];
								if (typeof videoSource.tagName === "string" && videoSource.tagName === "SOURCE") {
								videoSource.src = videoSource.dataset.src;
								}
							}

							video.target.load();
							video.target.classList.remove("lazy");
							lazyVideoObserver.unobserve(video.target);
							}
						});
					});

					lazyVideos.forEach(function(lazyVideo) {
						lazyVideoObserver.observe(lazyVideo);
					});
				}
			});

			// // Set canonical URL
			// const metaDataUrl =  `{{ metadata.url }}`;
			// const pageUrl = `{{ page.url }}`;
			// // home page vs other pages url logic
			// const url = pageUrl.split('/').length === 2 ? '' : pageUrl;
			// if(!url) {
			// 	console.log('sss')
			// 	document.querySelector('link[rel="canonical"]').setAttribute('href', metaDataUrl + url);
			// }
		</script>

		<!-- Current page: {{ page.url | htmlBaseUrl }} -->
	</body>
</html>
